# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

#
# CI triggers
#
# Limited resource, cannot afford CI for now.
trigger: none

#
# Version and jobs
#
variables:
  buildVersionMajor: 0
  buildVersionMinor: 1
  buildVersionRevision: $[counter(format('{0}.{1}', variables['buildVersionMajor'], variables['buildVersionMinor']), 0)]

# Job
name: '$(buildVersionMajor).$(buildVersionMinor).$(buildVersionRevision)'

#
# Build flavors
#
strategy:
  matrix:
    # windows-x86:
    #   poolName: Azure Pipelines
    #   imageName: 'windows-latest'
    #   rustup_toolchain: stable
    #   target: i686-pc-windows-msvc
    #   target_short: windows.x86
    #   is_cross_compile: true
    #   gcc_prefix:
    # windows-x64:
    #   poolName: Azure Pipelines
    #   imageName: 'windows-latest'
    #   rustup_toolchain: stable
    #   target: x86_64-pc-windows-msvc
    #   target_short: windows.x64
    #   is_cross_compile: false
    #   gcc_prefix:
    # windows-arm64:
    #   poolName: Azure Pipelines
    #   imageName: 'windows-latest'
    #   rustup_toolchain: stable
    #   target: aarch64-pc-windows-msvc
    #   target_short: windows.arm64
    #   is_cross_compile: true
    #   gcc_prefix:
    # linux-x86:
    #   poolName: r12f-cross
    #   imageName:
    #   rustup_toolchain: stable
    #   target: i686-unknown-linux-gnu
    #   target_short: linux.x86
    #   is_cross_compile: true
    #   gcc_prefix: i686-linux-gnu-
    # linux-x64:
    #   poolName: r12f-cross
    #   imageName:
    #   rustup_toolchain: stable
    #   target: x86_64-unknown-linux-gnu
    #   target_short: linux.x64
    #   is_cross_compile: false
    #   gcc_prefix:
    # linux-arm:
    #   poolName: r12f-cross
    #   imageName:
    #   rustup_toolchain: stable
    #   target: arm-unknown-linux-gnueabi
    #   target_short: linux.arm
    #   is_cross_compile: true
    #   gcc_prefix: arm-linux-gnueabi-
    # linux-arm64:
    #   poolName: r12f-cross
    #   imageName:
    #   rustup_toolchain: stable
    #   target: aarch64-unknown-linux-gnu
    #   target_short: linux.arm64
    #   is_cross_compile: true
    #   gcc_prefix: aarch64-linux-gnu-
    macos-x64:
      poolName: Azure Pipelines
      imageName: 'macos-latest'
      rustup_toolchain: stable
      target: x86_64-apple-darwin
      target_short: macos.x64
      is_cross_compile: false
      gcc_prefix:

pool:
  name: $(poolName)
  vmImage: $(imageName)

workspace:
  clean: all

steps:
#
# Force cleanup.
# Self-hosted agents must be cleaned up, otherwise it might carry the previous result to the latest build.
# https://docs.microsoft.com/en-us/azure/devops/pipelines/repos/pipeline-options-for-git?view=azure-devops&tabs=yaml#clean-the-local-repo-on-the-agent
#
- checkout: self
  clean: true

#
# Environment variable updates
#
- bash: |
    BUILD_BRANCH_NAME="$(Build.SourceBranch)"
    BUILD_BRANCH_NAME=${BUILD_BRANCH_NAME#refs/heads/}
    BUILD_BRANCH_NAME=${BUILD_BRANCH_NAME#refs/tags/}
    BUILD_BRANCH_NAME=${BUILD_BRANCH_NAME//\//_}
    echo "##vso[task.setvariable variable=build.branch_name]$BUILD_BRANCH_NAME"
    echo "##vso[task.setvariable variable=build.version]$(buildVersionMajor).$(buildVersionMinor).$(buildVersionRevision)"
    BUILD_TAG=$(buildVersionMajor).$(buildVersionMinor).$(buildVersionRevision).$BUILD_BRANCH_NAME
    echo "##vso[task.setvariable variable=build.tag]$BUILD_TAG"
  displayName: Update build environment variables

#
# Update build environment
#
- bash: |
    rustup default $RUSTUP_TOOLCHAIN
    rustup update $RUSTUP_TOOLCHAIN
  displayName: rustup update default toolchain

- script: rustup target install $(TARGET)
  displayName: rustup install target

#
# Update version files and pack all source code for crate publishing
#
- bash: |
    sed -i 's/^version = "0.1.0"$/version = "$(build.version)"/' Cargo.toml
  displayName: Update crate version
  condition: and(succeeded(), ne(variables['target'], 'x86_64-apple-darwin'))

- bash: |
    sed -i.bak 's/^version = "0.1.0"$/version = "$(build.version)"/' Cargo.toml
  displayName: Update crate version
  condition: and(succeeded(), eq(variables['target'], 'x86_64-apple-darwin'))

- task: ArchiveFiles@2
  displayName: Pack source folder for crate publishing
  condition: and(succeeded(), eq(variables['target'], 'x86_64-unknown-linux-gnu'))
  inputs:
    rootFolderOrFile: '$(Build.SourcesDirectory)'
    archiveType: '7z'
    archiveFile: '$(Build.ArtifactStagingDirectory)/crate/rnp.$(build.tag).7z'

#
# Build
#
- script: cargo build --release --all --target $(TARGET)
  displayName: Cargo build

- bash: |
    $(GCC_PREFIX)objcopy --only-keep-debug rnp rnp.symbols
    $(GCC_PREFIX)strip --strip-debug --strip-unneeded -p rnp
    $(GCC_PREFIX)objcopy --add-gnu-debuglink=rnp.symbols rnp
  displayName: Generate GCC symbol files
  condition: and(succeeded(), startsWith(variables['target_short'], 'linux.'))
  workingDirectory: $(Build.SourcesDirectory)/target/$(TARGET)/release

- bash: |
    gobjcopy --only-keep-debug rnp rnp.symbols
    strip --strip-debug --strip-unneeded -p rnp
    gobjcopy --add-gnu-debuglink=rnp.symbols rnp
  displayName: Generate GCC symbol files
  condition: and(succeeded(), startsWith(variables['target_short'], 'macos.'))
  workingDirectory: $(Build.SourcesDirectory)/target/$(TARGET)/release

#
# Running all tests
#
- script: cargo test --release --all --target $(TARGET)
  displayName: Cargo test
  condition: and(succeeded(), eq(variables['is_cross_compile'], false))

#
# Publish files for release
#
- task: CopyFiles@2
  displayName: Copy binary to output
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)/target/$(TARGET)/release'
    contents: |
      rnp*
      !rnp.pdb
      !rnp.symbols
      !rnp.d
    targetFolder: '$(Build.ArtifactStagingDirectory)/bin'

- task: CopyFiles@2
  displayName: Copy docs to output
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)'
    contents: |
      README.md
      LICENSE.txt
    targetFolder: '$(Build.ArtifactStagingDirectory)/bin'

- task: CopyFiles@2
  displayName: Copy symbols to output
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)/target/$(TARGET)/release'
    contents: |
      rnp.pdb
      rnp.symbols
    targetFolder: '$(Build.ArtifactStagingDirectory)/symbols'

- task: CopyFiles@2
  displayName: Copy package template to output
  condition: and(succeeded(), eq(variables['target'], 'x86_64-unknown-linux-gnu'))
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)/build/templates'
    targetFolder: '$(Build.ArtifactStagingDirectory)/templates'

#
# Publish all pipeline artifacts
#
- task: PublishPipelineArtifact@1
  displayName: Publish pipeline artifact
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)'
