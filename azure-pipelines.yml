#
# CI triggers
#
trigger: none

pr:
  branches:
    include:
      - main
  paths:
    include:
      - build
      - src
      - azure-pipelines.yml

#
# Version and jobs
#
variables:
- group: RnpCodeSign
- name: buildVersionMajor
  value: 0
- name: buildVersionMinor
  value: 1
- name: buildVersionRevision
  value: $[counter(format('{0}.{1}.{2}', variables['Build.SourceBranch'], variables['buildVersionMajor'], variables['buildVersionMinor']), 100)]

# Run
name: '$(buildVersionMajor).$(buildVersionMinor).$(buildVersionRevision)'

stages:
- stage: Build
  jobs:
  - job: Build
    #
    # Build flavors
    #
    strategy:
      matrix:
        windows-x86:
          poolName: Azure Pipelines
          imageName: 'windows-latest'
          rustup_toolchain: stable
          target: i686-pc-windows-msvc
          target_short: windows.x86
          is_cross_compile: true
          gcc_prefix:
          gcc_suffix:
          deb_arch:
        windows-x64:
          poolName: Azure Pipelines
          imageName: 'windows-latest'
          rustup_toolchain: stable
          target: x86_64-pc-windows-msvc
          target_short: windows.x64
          is_cross_compile: false
          gcc_prefix:
          gcc_suffix:
          deb_arch:
        windows-arm64:
          poolName: Azure Pipelines
          imageName: 'windows-latest'
          rustup_toolchain: stable
          target: aarch64-pc-windows-msvc
          target_short: windows.arm64
          is_cross_compile: true
          gcc_prefix:
          gcc_suffix:
          deb_arch:
        linux-x86:
          poolName: Azure Pipelines
          imageName: 'ubuntu-latest'
          rustup_toolchain: stable
          target: i686-unknown-linux-gnu
          target_short: linux.x86
          is_cross_compile: true
          gcc_prefix: x86_64-linux-gnu-
          gcc_suffix: -x86_64-linux-gnu
          deb_arch: x86
        linux-x64:
          poolName: Azure Pipelines
          imageName: 'ubuntu-latest'
          rustup_toolchain: stable
          target: x86_64-unknown-linux-gnu
          target_short: linux.x64
          is_cross_compile: false
          gcc_prefix:
          gcc_suffix:
          deb_arch: amd64
        linux-arm:
          poolName: Azure Pipelines
          imageName: 'ubuntu-latest'
          rustup_toolchain: stable
          target: arm-unknown-linux-gnueabi
          target_short: linux.arm
          is_cross_compile: true
          gcc_prefix: arm-linux-gnueabi-
          gcc_suffix: -arm-linux-gnueabi
          deb_arch: arm
        linux-arm64:
          poolName: Azure Pipelines
          imageName: 'ubuntu-latest'
          rustup_toolchain: stable
          target: aarch64-unknown-linux-gnu
          target_short: linux.arm64
          is_cross_compile: true
          gcc_prefix: aarch64-linux-gnu-
          gcc_suffix: -aarch64-linux-gnu
          deb_arch: arm64
        macos-x64:
          poolName: Azure Pipelines
          imageName: 'macos-latest'
          rustup_toolchain: stable
          target: x86_64-apple-darwin
          target_short: macos.x64
          is_cross_compile: false
          gcc_prefix:
          gcc_suffix:
          deb_arch:

    pool:
      name: $(poolName)
      vmImage: $(imageName)

    workspace:
      clean: all

    steps:
    #
    # Force cleanup.
    # Self-hosted agents must be cleaned up, otherwise it might carry the previous result to the latest build.
    # https://docs.microsoft.com/en-us/azure/devops/pipelines/repos/pipeline-options-for-git?view=azure-devops&tabs=yaml#clean-the-local-repo-on-the-agent
    #
    - checkout: self
      clean: true

    #
    # Environment variable updates
    #
    - bash: |
        BUILD_BRANCH_NAME="$(Build.SourceBranch)"
        BUILD_BRANCH_NAME=${BUILD_BRANCH_NAME#refs/heads/}
        BUILD_BRANCH_NAME=${BUILD_BRANCH_NAME#refs/tags/}
        BUILD_BRANCH_NAME=${BUILD_BRANCH_NAME//\//_}
        echo "##vso[task.setvariable variable=build.branch_name]$BUILD_BRANCH_NAME"
        echo "Updated build.branch_name to $BUILD_BRANCH_NAME"

        BUILD_VERSION=$(buildVersionMajor).$(buildVersionMinor).$(buildVersionRevision)
        echo "##vso[task.setvariable variable=build.version]$BUILD_VERSION"
        echo "Updated build.version to $BUILD_VERSION"

        BUILD_TAG=$BUILD_VERSION.$BUILD_BRANCH_NAME
        echo "##vso[task.setvariable variable=build.tag]$BUILD_TAG"
        echo "Updated build.tag to $BUILD_TAG"
      displayName: Update build environment variables

    #
    # Update build environment
    #
    - bash: |
        rustup default $RUSTUP_TOOLCHAIN
        rustup update $RUSTUP_TOOLCHAIN
      displayName: rustup update default toolchain

    - script: rustup target install $(TARGET)
      displayName: rustup install target
      
    - task: DotNetCoreCLI@2
      displayName: Install AzureSignTool
      condition: and(succeeded(), startsWith(variables['target_short'], 'windows.'))
      inputs:
        command: 'custom'
        custom: 'tool'
        arguments: 'install --global azuresigntool'

    - bash: |
        sudo apt install gcc make gcc-multilib
      displayName: Install build tools for linux x86 cross build
      condition: and(succeeded(), eq(variables['target'], 'i686-unknown-linux-gnu'))

    - bash: |
        sudo apt install gcc make gcc$(GCC_SUFFIX) binutils$(GCC_SUFFIX)
      displayName: Install build tools for linux
      condition: and(succeeded(), ne(variables['gcc_suffix'], ''), ne(variables['target'], 'i686-unknown-linux-gnu'))

    #
    # Update version files and pack all source code for crate publishing
    #
    - bash: |
        sed -i 's/^version = "0.1.0"$/version = "$(build.version)"/' Cargo.toml
      displayName: Update crate version
      condition: and(succeeded(), ne(variables['target'], 'x86_64-apple-darwin'))

    - bash: |
        sed -i.bak 's/^version = "0.1.0"$/version = "$(build.version)"/' Cargo.toml
      displayName: Update crate version
      condition: and(succeeded(), eq(variables['target'], 'x86_64-apple-darwin'))

    - task: ArchiveFiles@2
      displayName: Pack source folder for crate publishing
      condition: and(succeeded(), eq(variables['target'], 'x86_64-unknown-linux-gnu'))
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)'
        includeRootFolder: false
        archiveType: '7z'
        archiveFile: '$(Build.ArtifactStagingDirectory)/crate/rnp.source.7z'

    - task: CopyFiles@2
      displayName: Copy code for source code publishing
      condition: and(succeeded(), eq(variables['target'], 'x86_64-unknown-linux-gnu'))
      inputs:
        sourceFolder: '$(Build.SourcesDirectory)'
        targetFolder: '$(System.DefaultWorkingDirectory)/staging/crate'
        cleanTargetFolder: true
        overWrite: true

    - task: DeleteFiles@1
      displayName: Remove git info for source code publishing
      condition: and(succeeded(), eq(variables['target'], 'x86_64-unknown-linux-gnu'))
      inputs:
        sourceFolder: '$(System.DefaultWorkingDirectory)/staging/crate'
        Contents: '.git'

    - task: ArchiveFiles@2
      displayName: Pack source as zip for source code publishing
      condition: and(succeeded(), eq(variables['target'], 'x86_64-unknown-linux-gnu'))
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/staging/crate'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/source/rnp.source.$(build.tag).zip'

    - task: ArchiveFiles@2
      displayName: Pack source as tar.gz for source publishing
      condition: and(succeeded(), eq(variables['target'], 'x86_64-unknown-linux-gnu'))
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/staging/crate'
        includeRootFolder: false
        archiveType: 'tar'
        tarCompression: 'gz'
        archiveFile: '$(Build.ArtifactStagingDirectory)/source/rnp.source.$(build.tag).tar.gz'

    #
    # Running all tests
    #
    - bash: RUST_BACKTRACE=full cargo test --all --target $(TARGET)
      displayName: Cargo test
      condition: and(succeeded(), eq(variables['is_cross_compile'], false))

    #
    # Build
    #
    - script: cargo build --release --all --target $(TARGET)
      displayName: Cargo build

    - bash: |
        $(GCC_PREFIX)objcopy --only-keep-debug rnp rnp.debug
        $(GCC_PREFIX)strip --strip-debug --strip-unneeded -p rnp
        $(GCC_PREFIX)objcopy --add-gnu-debuglink=rnp.debug rnp
      displayName: Generate GCC symbol files
      condition: and(succeeded(), startsWith(variables['target_short'], 'linux.'))
      workingDirectory: $(Build.SourcesDirectory)/target/$(TARGET)/release

    - bash: |
        brew install binutils
        /usr/local/opt/binutils/bin/gobjcopy --only-keep-debug rnp rnp.debug
        strip -S rnp
        /usr/local/opt/binutils/bin/gobjcopy --add-gnu-debuglink=rnp.debug rnp
      displayName: Generate GCC symbol files
      condition: and(succeeded(), startsWith(variables['target_short'], 'macos.'))
      workingDirectory: $(Build.SourcesDirectory)/target/$(TARGET)/release
    
    - task: CmdLine@2
      displayName: 'Sign files with AzureSignTool'
      condition: and(succeeded(), startsWith(variables['target_short'], 'windows.'), ne(variables['Build.Reason'], 'PullRequest'))
      inputs:
        script: AzureSignTool sign -du "$(RnpSigningURL)" -kvu "$(RnpSigningVaultURL)" -kvi "$(RnpSigningClientId)" -kvs "$(RnpSigningClientSecret)" -kvc "$(RnpSigningCertName)" -v $(Build.SourcesDirectory)/target/$(TARGET)/release/rnp.exe"

    #
    # Publish files for release
    #
    - task: CopyFiles@2
      displayName: Copy binary to output
      inputs:
        sourceFolder: '$(Build.SourcesDirectory)/target/$(TARGET)/release'
        contents: |
          rnp*
          !rnp.pdb
          !rnp.debug
          !rnp.d
        targetFolder: '$(Build.ArtifactStagingDirectory)/bin'

    - task: CopyFiles@2
      displayName: Copy docs to output
      inputs:
        sourceFolder: '$(Build.SourcesDirectory)'
        contents: |
          README.md
          LICENSE.txt
        targetFolder: '$(Build.ArtifactStagingDirectory)/bin'

    - task: CopyFiles@2
      displayName: Copy symbols to output
      inputs:
        sourceFolder: '$(Build.SourcesDirectory)/target/$(TARGET)/release'
        contents: |
          rnp.pdb
          rnp.debug
        targetFolder: '$(Build.ArtifactStagingDirectory)/symbols'

    - task: CopyFiles@2
      displayName: Copy package template to output
      condition: and(succeeded(), eq(variables['target'], 'x86_64-pc-windows-msvc'))
      inputs:
        sourceFolder: '$(Build.SourcesDirectory)/build/templates'
        targetFolder: '$(Build.ArtifactStagingDirectory)/templates'

    - task: CopyFiles@2
      displayName: Copy pack scripts to output
      condition: and(succeeded(), eq(variables['target'], 'x86_64-pc-windows-msvc'))
      inputs:
        sourceFolder: '$(Build.SourcesDirectory)/build/pack'
        targetFolder: '$(Build.ArtifactStagingDirectory)/pack'

    - bash: |
        deb_pkg_name=rnp_$(build.version)-1_$(DEB_ARCH)
        echo "Creating deb package: $deb_pkg_name"

        echo "Copy binaries to $deb_pkg_name/usr/local/bin"
        mkdir -p $deb_pkg_name/usr/local/bin
        cp rnp $deb_pkg_name/usr/local/bin/
        echo ""

        echo "Generating deb package control file: $deb_pkg_name"
        mkdir -p $deb_pkg_name/DEBIAN
        cat $(Build.SourcesDirectory)/build/templates/debian/control | sed -e 's/{build_version}/$(build.version)/g' -e 's/{deb_arch}/$(DEB_ARCH)/g' > $deb_pkg_name/DEBIAN/control
        echo "Deb package control file generated: $deb_pkg_name/DEBIAN/control"
        cat $deb_pkg_name/DEBIAN/control
        echo ""

        echo "Building deb package: $deb_pkg_name"
        dpkg-deb --build --root-owner-group $deb_pkg_name
        if [ $? -ne 0 ]; then
          echo "Build deb package failed!"
          exit 1
        fi

        mkdir -p $(Build.ArtifactStagingDirectory)/debian
        cp $deb_pkg_name.deb $(Build.ArtifactStagingDirectory)/debian/
      displayName: Build debian packages
      condition: and(succeeded(), ne(variables['deb_arch'], ''))
      workingDirectory: $(Build.SourcesDirectory)/target/$(TARGET)/release

    #
    # Publish all pipeline artifacts
    #
    - task: PublishPipelineArtifact@1
      displayName: Publish pipeline artifact
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'

- stage: Pack
  jobs:
  - job: Pack
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

    pool:
      name: Azure Pipelines
      vmImage: 'windows-latest'

    workspace:
      clean: all

    steps:
      - checkout: none

      - task: DownloadPipelineArtifact@2
        displayName: 'Download Pipeline Artifact'
        inputs:
          targetPath: '$(System.DefaultWorkingDirectory)/r12f.rnp'

      - bash: |
          BUILD_BRANCH_NAME="$(Build.SourceBranch)"
          BUILD_BRANCH_NAME=${BUILD_BRANCH_NAME#refs/heads/}
          BUILD_BRANCH_NAME=${BUILD_BRANCH_NAME#refs/tags/}
          BUILD_BRANCH_NAME=${BUILD_BRANCH_NAME//\//_}
          echo "##vso[task.setvariable variable=build.branch_name]$BUILD_BRANCH_NAME"
          echo "Updated build.branch_name to $BUILD_BRANCH_NAME"

          BUILD_VERSION=$(buildVersionMajor).$(buildVersionMinor).$(buildVersionRevision)
          echo "##vso[task.setvariable variable=build.version]$BUILD_VERSION"
          echo "Updated build.version to $BUILD_VERSION"

          BUILD_TAG=$BUILD_VERSION.$BUILD_BRANCH_NAME
          echo "##vso[task.setvariable variable=build.tag]$BUILD_TAG"
          echo "Updated build.tag to $BUILD_TAG"
        displayName: 'Set environment variables'

      - task: PowerShell@2
        displayName: 'Generate all packages'
        inputs:
          targetType: 'filePath'
          filePath: '$(System.DefaultWorkingDirectory)/r12f.rnp/Build.Build.windowsx64/pack/PackReleasePackages.ps1'
          arguments:
            -BuildBranchName $(build.branch_name)
            -BuildTag $(build.tag)
            -BuildNumber $(build.version)
          workingDirectory: '$(System.DefaultWorkingDirectory)/r12f.rnp'

      - task: CopyFiles@2
        displayName: Copy packages to staging folder
        inputs:
          sourceFolder: '$(System.DefaultWorkingDirectory)/r12f.rnp/Releases'
          targetFolder: '$(Build.ArtifactStagingDirectory)/Releases'

      - task: PublishPipelineArtifact@1
        displayName: Publish pipeline artifact
        inputs:
          targetPath: '$(Build.ArtifactStagingDirectory)'
          
          
- stage: Validate
  jobs:
  - job: Validate
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    
    #
    # Flavors to validate
    #
    strategy:
      matrix:
        windows-x64:
          poolName: Azure Pipelines
          imageName: 'windows-latest'
          target_short: windows.x64
        linux-x64:
          poolName: Azure Pipelines
          imageName: 'ubuntu-latest'
          target_short: linux.x64
        macos-x64:
          poolName: Azure Pipelines
          imageName: 'macos-latest'
          target_short: macos.x64

    pool:
      name: $(poolName)
      vmImage: $(imageName)

    workspace:
      clean: all

    steps:
      - checkout: none

      - task: DownloadPipelineArtifact@2
        displayName: 'Download Pipeline Artifact'
        inputs:
          targetPath: '$(System.DefaultWorkingDirectory)/r12f.rnp'
          
      - bash: |
          BUILD_BRANCH_NAME="$(Build.SourceBranch)"
          BUILD_BRANCH_NAME=${BUILD_BRANCH_NAME#refs/heads/}
          BUILD_BRANCH_NAME=${BUILD_BRANCH_NAME#refs/tags/}
          BUILD_BRANCH_NAME=${BUILD_BRANCH_NAME//\//_}
          echo "##vso[task.setvariable variable=build.branch_name]$BUILD_BRANCH_NAME"
          echo "Updated build.branch_name to $BUILD_BRANCH_NAME"

          BUILD_VERSION=$(buildVersionMajor).$(buildVersionMinor).$(buildVersionRevision)
          echo "##vso[task.setvariable variable=build.version]$BUILD_VERSION"
          echo "Updated build.version to $BUILD_VERSION"

          BUILD_TAG=$BUILD_VERSION.$BUILD_BRANCH_NAME
          echo "##vso[task.setvariable variable=build.tag]$BUILD_TAG"
          echo "Updated build.tag to $BUILD_TAG"
        displayName: 'Set environment variables'
        
      - task: ExtractFiles@1
        displayName: 'Extract packed source code'
        inputs:
          archiveFilePatterns: '$(System.DefaultWorkingDirectory)/r12f.rnp/Pack.Pack/Releases/GithubReleases/rnp.source.$(build.tag).zip' 
          destinationFolder: $(System.DefaultWorkingDirectory)/Source
          cleanDestinationFolder: true 
        
      - bash: |
          cargo install --path .
        displayName: 'Install Rnp from source package'
        workingDirectory: $(System.DefaultWorkingDirectory)/Source

      - bash: |
          echo "Checking rnp exists before installation"
          dpkg -l | grep rnp
          echo ""

          echo "Install rnp from debian package"
          sudo dpkg -i ./rnp_$(build.version)-1_amd64.deb
          if [ $? -ne 0 ]; then
            echo "Failed to install rnp from debian package"
            exit 1
          fi
          echo ""

          echo "Check if rnp is successfully installed"
          dpkg -l | grep rnp
          echo ""

          echo "Uninstall rnp"
          sudo dpkg -r rnp
          if [ $? -ne 0 ]; then
            echo "Failed to uninstall rnp"
            exit 1
          fi
          echo ""

          echo "Check if rnp is successfully uninstalled"
          dpkg -l | grep rnp
          echo ""
        displayName: 'Install Rnp from debian package'
        condition: and(succeeded(), eq(variables['target_short'], 'linux.x64'))
        workingDirectory: $(System.DefaultWorkingDirectory)/r12f.rnp/Pack.Pack/Releases/DebianPackages

      - task: PublishPipelineArtifact@1
        displayName: Publish pipeline artifact
        inputs:
          targetPath: '$(Build.ArtifactStagingDirectory)'