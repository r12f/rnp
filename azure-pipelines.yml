# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

strategy:
  matrix:
    windows-x86:
      imageName: 'windows-latest'
      rustup_toolchain: stable
      target: i686-pc-windows-msvc
    windows-x64:
      imageName: 'windows-latest'
      rustup_toolchain: stable
      target: x86_64-pc-windows-msvc
    windows-arm64:
      imageName: 'windows-latest'
      rustup_toolchain: stable
      target: aarch64-pc-windows-msvc
    mac-x64:
      imageName: 'macos-latest'
      rustup_toolchain: stable
      target: x86_64-apple-darwin
    linux-x64:
      imageName: 'ubuntu-latest'
      rustup_toolchain: stable
      target: x86_64-unknown-linux-gnu
    linux-arm64:
      imageName: 'ubuntu-latest'
      rustup_toolchain: stable
      target: aarch64-unknown-linux-gnu

pool:
  vmImage: $(imageName)

steps:
- script: |
    set -e
    curl https://sh.rustup.rs -sSf | sh -s -- -y --profile minimal --default-toolchain $RUSTUP_TOOLCHAIN
    echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
  displayName: "Install rust (*nix)"
  condition: not(eq(variables['Agent.OS'], 'Windows_NT'))

- script: |
    curl -sSf -o rustup-init.exe https://win.rustup.rs
    rustup-init.exe -y --profile minimal --default-toolchain %RUSTUP_TOOLCHAIN%
    set PATH=%PATH%;%USERPROFILE%\.cargo\bin
    echo "##vso[task.setvariable variable=PATH;]%PATH%;%USERPROFILE%\.cargo\bin"
  displayName: "Install rust (windows)"
  condition: eq(variables['Agent.OS'], 'Windows_NT')

- bash: |
    rustup default $RUSTUP_TOOLCHAIN
    rustup update $RUSTUP_TOOLCHAIN
  displayName: "Set correct Rust version"

- script: rustup target install $(TARGET)
  displayName: rustup install target

- script: cargo build --release --all --target $(TARGET)
  displayName: Cargo build

- script: cargo test --release --all --target $(TARGET)
  displayName: Cargo test
