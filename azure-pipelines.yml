# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

# Limited resource, cannot afford CI for now.
trigger: none

variables:
  buildVersionMajor: 0
  buildVersionMinor: 1
  buildVersionRevision: $[counter(format('{0}.{1}', variables['buildVersionMajor'], variables['buildVersionMinor']), 0)]

# Job
name: '$(buildVersionMajor).$(buildVersionMinor).$(buildVersionRevision)'

strategy:
  matrix:
    windows-x86:
      poolName: Azure Pipelines
      imageName: 'windows-latest'
      rustup_toolchain: stable
      target: i686-pc-windows-msvc
      target_short: windows.x86
      is_cross_compile: true
    windows-x64:
      poolName: Azure Pipelines
      imageName: 'windows-latest'
      rustup_toolchain: stable
      target: x86_64-pc-windows-msvc
      target_short: windows.x64
      is_cross_compile: false
    windows-arm64:
      poolName: Azure Pipelines
      imageName: 'windows-latest'
      rustup_toolchain: stable
      target: aarch64-pc-windows-msvc
      target_short: windows.arm64
      is_cross_compile: true
    linux-x86:
      poolName: r12f-cross
      imageName:
      rustup_toolchain: stable
      target: i686-unknown-linux-gnu
      target_short: linux.x86
      is_cross_compile: true
    linux-x64:
      poolName: r12f-cross
      imageName:
      rustup_toolchain: stable
      target: x86_64-unknown-linux-gnu
      target_short: linux.x64
      is_cross_compile: false
    linux-arm:
      poolName: r12f-cross
      imageName:
      rustup_toolchain: stable
      target: arm-unknown-linux-gnueabi
      target_short: linux.arm
      is_cross_compile: true
    linux-arm64:
      poolName: r12f-cross
      imageName:
      rustup_toolchain: stable
      target: aarch64-unknown-linux-gnu
      target_short: linux.arm64
      is_cross_compile: true

pool:
  name: $(poolName)
  vmImage: $(imageName)

steps:
- checkout: self
  persistCredentials: true
  clean: true

- bash: |
    BUILD_BRANCH_NAME="$(Build.SourceBranch)"
    BUILD_BRANCH_NAME=${BUILD_BRANCH_NAME#refs/heads/}
    BUILD_BRANCH_NAME=${BUILD_BRANCH_NAME#refs/tags/}
    BUILD_BRANCH_NAME=${BUILD_BRANCH_NAME//\//_}
    echo "##vso[task.setvariable variable=build.branch_name]$BUILD_BRANCH_NAME"
    echo "##vso[task.setvariable variable=build.version]$(buildVersionMajor).$(buildVersionMinor).$(buildVersionRevision)"
    BUILD_TAG=$(buildVersionMajor).$(buildVersionMinor).$(buildVersionRevision).$BUILD_BRANCH_NAME
    echo "##vso[task.setvariable variable=build.tag]$BUILD_TAG"
  displayName: Update build environment variables

- script: |
    git config --global user.name "BuildService"
    git config --global user.email "r12f.code@gmail.com"
    git tag $(build.tag)
    git push origin $(build.tag)
  workingDirectory: $(Build.SourcesDirectory)
  condition: and(succeeded(), eq(variables['target'], 'x86_64-unknown-linux-gnu'))

- bash: |
    rustup default $RUSTUP_TOOLCHAIN
    rustup update $RUSTUP_TOOLCHAIN
  displayName: rustup update default toolchain

- script: rustup target install $(TARGET)
  displayName: rustup install target

- bash: |
    sed -i 's/^version = "0.1.0"$/version = "$(build.version)"/' Cargo.toml
  displayName: Update crate version

- script: cargo build --release --all --target $(TARGET)
  displayName: Cargo build

- script: cargo test --release --all --target $(TARGET)
  displayName: Cargo test
  condition: and(succeeded(), eq(variables['is_cross_compile'], false))

- task: CopyFiles@2
  displayName: Copy binary to output
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)/target/$(TARGET)/release'
    contents: |
      rnp*
      !rnp.d
    targetFolder: '$(Build.BinariesDirectory)/rnp'

- task: ArchiveFiles@2
  displayName: Pack binary to tar.gz
  inputs:
    rootFolderOrFile: '$(Build.BinariesDirectory)/rnp'
    archiveType: 'tar'
    tarCompression: 'gz'
    archiveFile: '$(Build.ArtifactStagingDirectory)/rnp.$(build.tag).$(TARGET_SHORT).tar.gz'

- task: ArchiveFiles@2
  displayName: Pack binary to zip
  inputs:
    rootFolderOrFile: '$(Build.BinariesDirectory)/rnp'
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/rnp.$(build.tag).$(TARGET_SHORT).zip'

- task: ArchiveFiles@2
  displayName: Pack binary to 7z
  inputs:
    rootFolderOrFile: '$(Build.BinariesDirectory)/rnp'
    archiveType: '7z'
    archiveFile: '$(Build.ArtifactStagingDirectory)/rnp.$(build.tag).$(TARGET_SHORT).7z'

# We cannot use the source directory in the command directly, because Azure Pipeline will give them incorrect values
# on windows machines, like this: D:a1s/target/..... However it seems fine on Linux.
- bash: |
    cp /f README.md $(Build.SourcesDirectory)/target/$(TARGET)/release
    cp /f LICENSE.txt $(Build.SourcesDirectory)/target/$(TARGET)/release
    sed -e 's/{build_tag}/$(build.tag)/g' -e 's/{version}/$(build.version)/g' -e 's/{target_short}/$(TARGET_SHORT)/g' -e 's/{target}/$(TARGET)/g' build/nuget_package.template > target/$(TARGET)/release/rnp.nuspec
  displayName: Prepare nuget package files
  workingDirectory: $(Build.SourcesDirectory)

- bash: |
    nuget pack target/$(TARGET)/release/rnp.nuspec -Verbosity detailed -OutputDirectory $(Build.ArtifactStagingDirectory)
  displayName: Generate nuget package
  workingDirectory: $(Build.SourcesDirectory)

- task: PublishPipelineArtifact@1
  displayName: Publish pipeline artifact
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)'
